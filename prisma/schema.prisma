// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  firstName             String
  lastName              String
  email                 String
  hashedPassword        String
  role                  Role                   @default(USER)
  email_verified        Boolean
  sessions              Session[]
  emailVerificationCode EmailVerificationCode?
  ResetToken            ResetToken[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  // Relationships
  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerificationCode {
  id        Int      @id @default(autoincrement())
  code      String
  userId    String   @unique
  email     String
  expiresAt DateTime
  sentAt    DateTime

  // Relationships
  user User @relation(fields: [userId], references: [id])
}

model ResetToken {
  id        String   @id @default(uuid())
  code      String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Customer {
  id               Int               @id @default(autoincrement())
  firstName        String
  middleName       String
  lastName         String
  email            String            @unique
  address          String
  passportNumber   String?           @unique
  currentVisa      VisaType?
  visaExpiry       DateTime?
  phone            String            @unique
  visaApplications VisaApplication[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model VisaApplication {
  id              Int      @id @default(autoincrement())
  firstName       String
  middleName      String
  lastName        String
  email           String   @unique
  address         String
  passportNumber  String   @unique
  visaAppliedDate DateTime @default(now())
  visaStatus      Status
  previousVisa    VisaType
  visaType        VisaType
  totalAmount     Float    @default(0.0)
  totalPaid       Float    @default(0.0)
  overseer        String?
  customerId      Int // Foreign key to the Customer table
  customer        Customer @relation(fields: [customerId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum OverSeer {
  DEEPAK
  GANESH
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum VisaType {
  SUB_500 // Student Visa
  SUB_482 // Temporary Skill Shortage (TSS) Visa
  SUB_407 // Training Visa
  SUB_186 // Employer Nomination Scheme (ENS) Visa
  SUB_189 // Skilled Independent Visa
  SUB_190 // Skilled Nominated Visa
  SUB_600 // Visitor Visa (Tourist)
  SUB_820 // Partner Visa (Temporary)
  SUB_801 // Partner Visa (Permanent)
}
